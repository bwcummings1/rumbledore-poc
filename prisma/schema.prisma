// Prisma schema for Rumbledore Fantasy Football Platform
// This schema implements a sandboxed league architecture where each league
// operates in complete isolation with dedicated storage and AI agents

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp"), vector, pg_trgm, btree_gist]
}

// Core user model for authentication and identity
model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String    @unique @db.VarChar(255)
  username      String    @unique @db.VarChar(100)
  displayName   String?   @map("display_name") @db.VarChar(255)
  avatarUrl     String?   @map("avatar_url")
  password      String?   @db.VarChar(255)
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  leagues     LeagueMember[]
  credentials EspnCredential[]
  createdLeagues League[] @relation("LeagueCreator")
  createdPlayerIdentities PlayerIdentity[]
  createdPlayerMappings PlayerIdentityMapping[]
  identityAuditLogs IdentityAuditLog[]
  userRoles   UserRole[]
  auditLogs   AuditLog[]
  systemConfigs SystemConfig[] @relation("ConfigUpdater")
  invitations Invitation[] @relation("InvitationCreator")
  leagueSettings LeagueSettings[] @relation("SettingsUpdater")
  agentConversations AgentConversation[] @relation("UserConversations")
  agentSummons AgentSummon[]

  @@map("users")
}

// League model with sandboxed namespace for complete isolation
model League {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  espnLeagueId     BigInt   @unique @map("espn_league_id")
  name             String   @db.VarChar(255)
  season           Int
  sandboxNamespace String   @unique @map("sandbox_namespace") @db.VarChar(100)
  settings         Json     @default("{}")
  isActive         Boolean  @default(true) @map("is_active")
  lastSyncAt       DateTime? @map("last_sync_at")
  createdBy        String?  @map("created_by") @db.Uuid
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  creator     User? @relation("LeagueCreator", fields: [createdBy], references: [id])
  members     LeagueMember[]
  players     LeaguePlayer[]
  credentials EspnCredential[]
  teams       LeagueTeam[]
  matchups    LeagueMatchup[]
  agentMemory LeagueAgentMemory[]
  historicalData LeagueHistoricalData[]
  importCheckpoints ImportCheckpoint[]
  archives    LeagueArchive[]
  syncMetadata SyncMetadata?
  transactions LeagueTransaction[]
  playerStats LeaguePlayerStats[]
  teamIdentities TeamIdentity[]
  teamMappings TeamIdentityMapping[]
  allTimeRecords AllTimeRecord[]
  headToHeadRecords HeadToHeadRecord[]
  performanceTrends PerformanceTrend[]
  championshipRecords ChampionshipRecord[]
  statisticsCalculations StatisticsCalculation[]
  seasonStatistics SeasonStatistics[]
  weeklyStatistics WeeklyStatistics[]
  generatedContent GeneratedContent[]
  blogPosts BlogPost[]
  contentSchedules ContentSchedule[]
  contentTemplates ContentTemplate[]
  chatMessages ChatMessage[]
  chatSessions ChatSession[]

  @@unique([espnLeagueId, season])
  @@index([sandboxNamespace])
  @@index([espnLeagueId])
  @@map("leagues")
}

// League membership with role-based access control
model LeagueMember {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId   String   @map("league_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  espnTeamId Int?     @map("espn_team_id")
  teamName   String?  @map("team_name") @db.VarChar(255)
  role       MemberRole @default(MEMBER)
  joinedAt   DateTime @default(now()) @map("joined_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   LeagueTeam? @relation(fields: [leagueId, espnTeamId], references: [leagueId, espnTeamId])

  @@unique([leagueId, userId])
  @@index([userId])
  @@index([leagueId])
  @@map("league_members")
}

// ESPN credentials stored with encryption
model EspnCredential {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String    @map("user_id") @db.Uuid
  leagueId        String    @map("league_id") @db.Uuid
  encryptedSwid   String    @map("encrypted_swid")
  encryptedEspnS2 String    @map("encrypted_espn_s2")
  expiresAt       DateTime? @map("expires_at")
  lastValidated   DateTime? @map("last_validated")
  isValid         Boolean   @default(true) @map("is_valid")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@index([leagueId])
  @@map("espn_credentials")
}

// League-scoped player data with vector embeddings for AI
model LeaguePlayer {
  id            String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId      String                 @map("league_id") @db.Uuid
  espnPlayerId  BigInt                 @map("espn_player_id")
  name          String                 @db.VarChar(255)
  position      String?                @db.VarChar(10)
  nflTeam       String?                @map("nfl_team") @db.VarChar(10)
  stats         Json                   @default("{}")
  projections   Json                   @default("{}")
  embeddings    Unsupported("vector(1536)")? @map("embeddings")
  imageUrl      String?                @map("image_url")
  injuryStatus  String?                @map("injury_status") @db.VarChar(50)
  updatedAt     DateTime               @default(now()) @map("updated_at")

  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  rosterSpots LeagueRosterSpot[]

  @@unique([leagueId, espnPlayerId])
  @@index([leagueId])
  @@index([espnPlayerId])
  @@map("league_players")
}

// League teams (fantasy teams within a league)
model LeagueTeam {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId     String   @map("league_id") @db.Uuid
  espnTeamId   Int      @map("espn_team_id")
  name         String   @db.VarChar(255)
  abbreviation String?  @db.VarChar(10)
  logoUrl      String?  @map("logo_url")
  wins         Int      @default(0)
  losses       Int      @default(0)
  ties         Int      @default(0)
  pointsFor    Float    @default(0) @map("points_for")
  pointsAgainst Float   @default(0) @map("points_against")
  standing     Int?
  playoffSeed  Int?     @map("playoff_seed")
  updatedAt    DateTime @default(now()) @map("updated_at")

  // Relations
  league  League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  members LeagueMember[]
  roster  LeagueRosterSpot[]
  homeMatchups LeagueMatchup[] @relation("HomeTeam")
  awayMatchups LeagueMatchup[] @relation("AwayTeam")

  @@unique([leagueId, espnTeamId])
  @@index([leagueId])
  @@map("league_teams")
}

// Fantasy roster spots
model LeagueRosterSpot {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId   String   @map("league_id") @db.Uuid
  teamId     String   @map("team_id") @db.Uuid
  playerId   String   @map("player_id") @db.Uuid
  slotPosition String @map("slot_position") @db.VarChar(20)
  week       Int
  points     Float    @default(0)
  
  // Relations
  team   LeagueTeam   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player LeaguePlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([teamId, playerId, week])
  @@index([teamId])
  @@index([playerId])
  @@map("league_roster_spots")
}

// League matchups (games between fantasy teams)
model LeagueMatchup {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId     String   @map("league_id") @db.Uuid
  week         Int
  matchupPeriod Int     @map("matchup_period")
  homeTeamId   String   @map("home_team_id") @db.Uuid
  awayTeamId   String   @map("away_team_id") @db.Uuid
  homeScore    Float?   @map("home_score")
  awayScore    Float?   @map("away_score")
  isPlayoffs   Boolean  @default(false) @map("is_playoffs")
  isComplete   Boolean  @default(false) @map("is_complete")
  
  // Relations
  league   League     @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  homeTeam LeagueTeam @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam LeagueTeam @relation("AwayTeam", fields: [awayTeamId], references: [id])

  @@unique([leagueId, week, homeTeamId, awayTeamId])
  @@index([leagueId, week])
  @@map("league_matchups")
}

// AI agent memory for league-specific context
model LeagueAgentMemory {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId    String   @map("league_id") @db.Uuid
  agentType   AgentType @map("agent_type")
  memoryType  MemoryType @map("memory_type")
  content     String   @db.Text
  metadata    Json     @default("{}")
  embeddings  Unsupported("vector(1536)")? @map("embeddings")
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime? @map("expires_at")

  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@index([leagueId, agentType])
  @@index([createdAt])
  @@map("league_agent_memory")
}

// Historical data storage for multiple seasons
model LeagueHistoricalData {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId          String   @map("league_id") @db.Uuid
  season            Int
  dataType          String   @map("data_type") @db.VarChar(50) // 'matchups', 'players', 'transactions', 'teams'
  data              Json     // Full season data
  dataHash          String   @map("data_hash") @db.VarChar(64) // SHA256 hash for deduplication
  recordCount       Int      @map("record_count")
  importedAt        DateTime @default(now()) @map("imported_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, season, dataType])
  @@index([leagueId, season])
  @@index([dataHash])
  @@map("league_historical_data")
}

// Import progress tracking for resumability
model ImportCheckpoint {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  importId        String   @map("import_id") @db.VarChar(255)
  leagueId        String   @map("league_id") @db.Uuid
  processedItems  Int      @map("processed_items")
  totalItems      Int      @map("total_items")
  currentSeason   Int?     @map("current_season")
  currentWeek     Int?     @map("current_week")
  metadata        Json     @default("{}")
  status          ImportStatus @default(PENDING)
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@index([importId])
  @@index([leagueId])
  @@map("import_checkpoints")
}

// Archive storage for old season data
model LeagueArchive {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId        String   @map("league_id") @db.Uuid
  season          Int
  dataType        String   @map("data_type") @db.VarChar(50)
  compressedData  Bytes    @map("compressed_data")
  originalSize    Int      @map("original_size")
  compressedSize  Int      @map("compressed_size")
  compressionRatio Float   @map("compression_ratio")
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, season, dataType])
  @@index([leagueId, season])
  @@map("league_archives")
}

// Sync metadata for incremental updates
model SyncMetadata {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId        String   @unique @map("league_id") @db.Uuid
  lastSyncedAt    DateTime @map("last_synced_at")
  lastSyncedWeek  Int?     @map("last_synced_week")
  lastSyncedSeason Int?    @map("last_synced_season")
  totalSeasons    Int      @default(0) @map("total_seasons")
  totalMatchups   Int      @default(0) @map("total_matchups")
  totalPlayers    Int      @default(0) @map("total_players")
  metadata        Json     @default("{}")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@map("sync_metadata")
}

// League transactions for historical tracking
model LeagueTransaction {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId         String   @map("league_id") @db.Uuid
  transactionId    BigInt   @map("transaction_id")
  season           Int
  type             String   @db.VarChar(50)
  status           String   @db.VarChar(50)
  teamId           Int?     @map("team_id")
  playerId         BigInt?  @map("player_id")
  bidAmount        Int?     @map("bid_amount")
  transactionDate  DateTime @map("transaction_date")
  metadata         Json     @default("{}")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, transactionId, season])
  @@index([leagueId, season])
  @@index([transactionDate])
  @@map("league_transactions")
}

// Player stats by season
model LeaguePlayerStats {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId      String   @map("league_id") @db.Uuid
  playerId      BigInt   @map("player_id")
  season        Int
  week          Int?
  points        Float    @default(0)
  projectedPoints Float? @map("projected_points")
  stats         Json     @default("{}")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, playerId, season, week])
  @@index([leagueId, season])
  @@index([playerId, season])
  @@map("league_player_stats")
}

// Enums
enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  
  @@map("member_role")
}

enum AgentType {
  COMMISSIONER
  ANALYST
  NARRATOR
  TRASH_TALKER
  BETTING_ADVISOR
  
  @@map("agent_type")
}

enum MemoryType {
  SHORT_TERM
  LONG_TERM
  EPISODIC
  SEMANTIC
  
  @@map("memory_type")
}

enum ImportStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  PAUSED
  
  @@map("import_status")
}

// Identity Resolution Models

// Master player identity table
model PlayerIdentity {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  masterPlayerId  String   @unique @map("master_player_id") @db.Uuid
  canonicalName   String   @map("canonical_name") @db.VarChar(255)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String?  @map("created_by") @db.Uuid
  confidenceScore Float    @default(1.00) @map("confidence_score")
  verified        Boolean  @default(false)
  metadata        Json     @default("{}")
  
  // Relations
  creator  User? @relation(fields: [createdBy], references: [id])
  mappings PlayerIdentityMapping[]
  
  @@map("player_identities")
}

// Player identity mappings across seasons
model PlayerIdentityMapping {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  masterPlayerId  String   @map("master_player_id") @db.Uuid
  espnPlayerId    BigInt   @map("espn_player_id")
  season          Int
  nameVariation   String   @map("name_variation") @db.VarChar(255)
  confidenceScore Float    @map("confidence_score")
  mappingMethod   MappingMethod @map("mapping_method")
  createdAt       DateTime @default(now()) @map("created_at")
  createdBy       String?  @map("created_by") @db.Uuid
  
  // Relations
  playerIdentity PlayerIdentity @relation(fields: [masterPlayerId], references: [masterPlayerId], onDelete: Cascade)
  creator        User? @relation(fields: [createdBy], references: [id])
  
  @@unique([espnPlayerId, season])
  @@index([masterPlayerId])
  @@index([espnPlayerId])
  @@map("player_identity_mappings")
}

// Team identity continuity
model TeamIdentity {
  id            String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  masterTeamId  String   @unique @map("master_team_id") @db.Uuid
  leagueId      String   @map("league_id") @db.Uuid
  canonicalName String   @map("canonical_name") @db.VarChar(255)
  ownerHistory  Json     @default("[]") @map("owner_history")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  mappings TeamIdentityMapping[]
  
  @@index([leagueId])
  @@map("team_identities")
}

// Team identity mappings across seasons
model TeamIdentityMapping {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  masterTeamId    String   @map("master_team_id") @db.Uuid
  leagueId        String   @map("league_id") @db.Uuid
  espnTeamId      Int      @map("espn_team_id")
  season          Int
  teamName        String   @map("team_name") @db.VarChar(255)
  ownerName       String?  @map("owner_name") @db.VarChar(255)
  confidenceScore Float    @map("confidence_score")
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  teamIdentity TeamIdentity @relation(fields: [masterTeamId], references: [masterTeamId], onDelete: Cascade)
  league       League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, espnTeamId, season])
  @@index([masterTeamId])
  @@index([leagueId])
  @@map("team_identity_mappings")
}

// Audit trail for all identity changes
model IdentityAuditLog {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entityType  EntityType @map("entity_type")
  entityId    String   @map("entity_id") @db.Uuid
  action      AuditAction
  beforeState Json?    @map("before_state")
  afterState  Json?    @map("after_state")
  reason      String?  @db.Text
  performedBy String?  @map("performed_by") @db.Uuid
  performedAt DateTime @default(now()) @map("performed_at")
  
  // Relations
  performer User? @relation(fields: [performedBy], references: [id])
  
  @@index([entityType, entityId])
  @@index([performedBy])
  @@map("identity_audit_log")
}

enum MappingMethod {
  AUTOMATIC
  MANUAL
  FUZZY_MATCH
  
  @@map("mapping_method")
}

enum EntityType {
  PLAYER
  TEAM
  
  @@map("entity_type")
}

enum AuditAction {
  CREATE
  MERGE
  SPLIT
  UPDATE
  DELETE
  ROLLBACK
  
  @@map("audit_action")
}

// Statistics Models

// All-time records tracking
model AllTimeRecord {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId         String   @map("league_id") @db.Uuid
  recordType       String   @map("record_type") @db.VarChar(100)
  recordHolderType String   @map("record_holder_type") @db.VarChar(50)
  recordHolderId   String   @map("record_holder_id") @db.VarChar(255)
  recordValue      Decimal  @map("record_value") @db.Decimal(10, 2)
  season           String?  @db.VarChar(50)
  week             Int?
  opponentId       String?  @map("opponent_id") @db.VarChar(255)
  dateAchieved     DateTime? @map("date_achieved")
  metadata         Json     @default("{}")
  previousRecordId String?  @map("previous_record_id") @db.Uuid
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  
  // Relations
  league         League         @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  previousRecord AllTimeRecord? @relation("RecordHistory", fields: [previousRecordId], references: [id])
  nextRecords    AllTimeRecord[] @relation("RecordHistory")
  
  @@unique([leagueId, recordType, recordHolderType], map: "idx_all_time_records_unique")
  @@index([leagueId], map: "idx_all_time_records_league")
  @@index([recordType], map: "idx_all_time_records_type")
  @@map("all_time_records")
}

// Head-to-head records
model HeadToHeadRecord {
  id                   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId             String   @map("league_id") @db.Uuid
  team1Id              String   @map("team1_id") @db.VarChar(255)
  team2Id              String   @map("team2_id") @db.VarChar(255)
  totalMatchups        Int      @default(0) @map("total_matchups")
  team1Wins            Int      @default(0) @map("team1_wins")
  team2Wins            Int      @default(0) @map("team2_wins")
  ties                 Int      @default(0)
  team1TotalPoints     Decimal  @default(0) @map("team1_total_points") @db.Decimal(10, 2)
  team2TotalPoints     Decimal  @default(0) @map("team2_total_points") @db.Decimal(10, 2)
  team1HighestScore    Decimal? @map("team1_highest_score") @db.Decimal(10, 2)
  team2HighestScore    Decimal? @map("team2_highest_score") @db.Decimal(10, 2)
  lastMatchupDate      DateTime? @map("last_matchup_date")
  playoffMatchups      Int      @default(0) @map("playoff_matchups")
  championshipMatchups Int      @default(0) @map("championship_matchups")
  metadata             Json     @default("{}")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @map("updated_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, team1Id, team2Id], map: "idx_h2h_unique")
  @@index([leagueId], map: "idx_h2h_league")
  @@index([team1Id], map: "idx_h2h_team1")
  @@index([team2Id], map: "idx_h2h_team2")
  @@map("head_to_head_records")
}

// Performance trends
model PerformanceTrend {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId       String   @map("league_id") @db.Uuid
  entityType     String   @map("entity_type") @db.VarChar(50)
  entityId       String   @map("entity_id") @db.VarChar(255)
  periodType     String   @map("period_type") @db.VarChar(50)
  periodValue    String   @map("period_value") @db.VarChar(50)
  metrics        Json
  trendDirection String?  @map("trend_direction") @db.VarChar(20)
  trendStrength  Decimal? @map("trend_strength") @db.Decimal(5, 2)
  calculatedAt   DateTime @default(now()) @map("calculated_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, entityType, entityId, periodType, periodValue], map: "idx_trends_unique")
  @@index([leagueId], map: "idx_trends_league")
  @@index([entityType, entityId], map: "idx_trends_entity")
  @@index([calculatedAt], map: "idx_trends_calculated")
  @@map("performance_trends")
}

// Championship records
model ChampionshipRecord {
  id                    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId              String   @map("league_id") @db.Uuid
  season                String   @db.VarChar(50)
  championId            String   @map("champion_id") @db.VarChar(255)
  runnerUpId            String?  @map("runner_up_id") @db.VarChar(255)
  thirdPlaceId          String?  @map("third_place_id") @db.VarChar(255)
  regularSeasonWinnerId String?  @map("regular_season_winner_id") @db.VarChar(255)
  championshipScore     Decimal? @map("championship_score") @db.Decimal(10, 2)
  runnerUpScore         Decimal? @map("runner_up_score") @db.Decimal(10, 2)
  playoffBracket        Json?    @map("playoff_bracket")
  createdAt             DateTime @default(now()) @map("created_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, season], map: "idx_championships_unique")
  @@index([leagueId], map: "idx_championships_league")
  @@index([championId], map: "idx_championships_champion")
  @@map("championship_records")
}

// Statistics calculation log
model StatisticsCalculation {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId        String    @map("league_id") @db.Uuid
  calculationType String    @map("calculation_type") @db.VarChar(100)
  status          String    @default("PENDING") @db.VarChar(50)
  startedAt       DateTime? @map("started_at")
  completedAt     DateTime? @map("completed_at")
  errorMessage    String?   @map("error_message") @db.Text
  recordsProcessed Int      @default(0) @map("records_processed")
  executionTimeMs  Int?     @map("execution_time_ms")
  metadata        Json      @default("{}")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@index([leagueId], map: "idx_calc_league")
  @@index([status], map: "idx_calc_status")
  @@index([createdAt], map: "idx_calc_created")
  @@map("statistics_calculations")
}

// Season statistics
model SeasonStatistics {
  id                      String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId                String   @map("league_id") @db.Uuid
  season                  String   @db.VarChar(50)
  teamId                  String   @map("team_id") @db.VarChar(255)
  wins                    Int      @default(0)
  losses                  Int      @default(0)
  ties                    Int      @default(0)
  pointsFor               Decimal  @default(0) @map("points_for") @db.Decimal(10, 2)
  pointsAgainst           Decimal  @default(0) @map("points_against") @db.Decimal(10, 2)
  avgPointsFor            Decimal? @map("avg_points_for") @db.Decimal(10, 2)
  avgPointsAgainst        Decimal? @map("avg_points_against") @db.Decimal(10, 2)
  highestScore            Decimal? @map("highest_score") @db.Decimal(10, 2)
  lowestScore             Decimal? @map("lowest_score") @db.Decimal(10, 2)
  pointsStdDev            Decimal? @map("points_std_dev") @db.Decimal(10, 2)
  longestWinStreak        Int      @default(0) @map("longest_win_streak")
  longestLossStreak       Int      @default(0) @map("longest_loss_streak")
  currentStreakType       String?  @map("current_streak_type") @db.VarChar(10)
  currentStreakCount      Int      @default(0) @map("current_streak_count")
  playoffAppearance       Boolean  @default(false) @map("playoff_appearance")
  championshipAppearance  Boolean  @default(false) @map("championship_appearance")
  divisionWinner          Boolean  @default(false) @map("division_winner")
  calculatedAt            DateTime @default(now()) @map("calculated_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, season, teamId], map: "idx_season_stats_unique")
  @@index([leagueId], map: "idx_season_stats_league")
  @@index([season], map: "idx_season_stats_season")
  @@index([teamId], map: "idx_season_stats_team")
  @@map("season_statistics")
}

// Weekly statistics
model WeeklyStatistics {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId         String   @map("league_id") @db.Uuid
  season           String   @db.VarChar(50)
  week             Int
  teamId           String   @map("team_id") @db.VarChar(255)
  opponentId       String?  @map("opponent_id") @db.VarChar(255)
  pointsFor        Decimal  @map("points_for") @db.Decimal(10, 2)
  pointsAgainst    Decimal? @map("points_against") @db.Decimal(10, 2)
  result           String?  @db.VarChar(10) // 'WIN', 'LOSS', 'TIE'
  isPlayoff        Boolean  @default(false) @map("is_playoff")
  isChampionship   Boolean  @default(false) @map("is_championship")
  marginOfVictory  Decimal? @map("margin_of_victory") @db.Decimal(10, 2)
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now()) @map("created_at")
  
  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, season, week, teamId], map: "idx_weekly_stats_unique")
  @@index([leagueId], map: "idx_weekly_stats_league")
  @@index([season, week], map: "idx_weekly_stats_season")
  @@index([teamId], map: "idx_weekly_stats_team")
  @@map("weekly_statistics")
}

// Admin Portal Models

// Role model for RBAC
model Role {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  permissions RolePermission[]
  userRoles   UserRole[]
  
  @@map("roles")
}

// Permission model
model Permission {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  resource    String   @db.VarChar(100)
  action      String   @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  roles RolePermission[]
  
  @@map("permissions")
}

// User-Role mapping
model UserRole {
  userId     String   @map("user_id") @db.Uuid
  roleId     String   @map("role_id") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String?  @map("assigned_by") @db.Uuid
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@id([userId, roleId])
  @@map("user_roles")
}

// Role-Permission mapping
model RolePermission {
  roleId       String @map("role_id") @db.Uuid
  permissionId String @map("permission_id") @db.Uuid
  
  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// League settings
model LeagueSettings {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueSandbox     String   @unique @map("league_sandbox") @db.VarChar(255)
  settings          Json     @default("{}")
  features          Json     @default("{\"espn\": true, \"ai_content\": false, \"betting\": false}")
  syncConfig        Json     @default("{\"auto_sync\": true, \"sync_interval\": 3600}") @map("sync_config")
  notificationConfig Json    @default("{}") @map("notification_config")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  updatedBy         String?  @map("updated_by") @db.Uuid
  
  // Relations
  updater User? @relation("SettingsUpdater", fields: [updatedBy], references: [id])
  
  @@map("league_settings")
}

// System configuration
model SystemConfig {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key         String   @unique @db.VarChar(255)
  value       Json
  description String?  @db.Text
  category    String?  @db.VarChar(100)
  isSecret    Boolean  @default(false) @map("is_secret")
  updatedAt   DateTime @updatedAt @map("updated_at")
  updatedBy   String?  @map("updated_by") @db.Uuid
  
  // Relations
  updater User? @relation("ConfigUpdater", fields: [updatedBy], references: [id])
  
  @@map("system_config")
}

// Audit logs
model AuditLog {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  action     String   @db.VarChar(100)
  entityType String?  @map("entity_type") @db.VarChar(100)
  entityId   String?  @map("entity_id") @db.VarChar(255)
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  metadata   Json     @default("{}")
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  user User? @relation(fields: [userId], references: [id])
  
  @@index([userId], map: "idx_audit_logs_user")
  @@index([entityType, entityId], map: "idx_audit_logs_entity")
  @@index([createdAt], map: "idx_audit_logs_created")
  @@map("audit_logs")
}

// System health metrics
model SystemMetric {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  metricType String   @map("metric_type") @db.VarChar(100)
  metricName String   @map("metric_name") @db.VarChar(255)
  value      Decimal  @db.Decimal(20, 4)
  unit       String?  @db.VarChar(50)
  tags       Json     @default("{}")
  recordedAt DateTime @default(now()) @map("recorded_at")
  
  @@index([metricType, metricName, recordedAt], map: "idx_system_metrics_lookup")
  @@map("system_metrics")
}

// Data sync status
model SyncStatus {
  id               String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueSandbox    String   @map("league_sandbox") @db.VarChar(255)
  syncType         String   @map("sync_type") @db.VarChar(100)
  status           String   @default("PENDING") @db.VarChar(50)
  startedAt        DateTime? @map("started_at")
  completedAt      DateTime? @map("completed_at")
  recordsProcessed Int      @default(0) @map("records_processed")
  recordsFailed    Int      @default(0) @map("records_failed")
  errorMessage     String?  @map("error_message") @db.Text
  metadata         Json     @default("{}")
  createdAt        DateTime @default(now()) @map("created_at")
  
  @@index([leagueSandbox, syncType, createdAt], map: "idx_sync_status_lookup")
  @@map("sync_status")
}

// Invitations
model Invitation {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueSandbox String    @map("league_sandbox") @db.VarChar(255)
  email         String    @db.VarChar(255)
  role          String    @default("MEMBER") @db.VarChar(50)
  token         String    @unique @db.VarChar(255)
  expiresAt     DateTime  @map("expires_at")
  acceptedAt    DateTime? @map("accepted_at")
  createdBy     String?   @map("created_by") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  creator User? @relation("InvitationCreator", fields: [createdBy], references: [id])
  
  @@unique([leagueSandbox, email])
  @@map("invitations")
}

// ========== AI AGENT MODELS (Sprint 8) ==========

// Agent memory storage for LangChain integration
model AgentMemory {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  agentId       String    @map("agent_id") @db.VarChar(255)
  leagueSandbox String?   @map("league_sandbox") @db.VarChar(255)
  content       String    @db.Text
  embedding     Unsupported("vector(1536)")?
  metadata      Json      @default("{}")
  importance    Float     @default(0.5) @db.Real
  createdAt     DateTime  @default(now()) @map("created_at")
  accessedAt    DateTime  @default(now()) @map("accessed_at")
  accessCount   Int       @default(0) @map("access_count")
  
  @@index([agentId, leagueSandbox])
  @@index([createdAt])
  @@map("agent_memories")
}

// Conversation history for agent interactions
model AgentConversation {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionId     String    @map("session_id") @db.VarChar(255)
  userId        String?   @map("user_id") @db.Uuid
  agentId       String    @map("agent_id") @db.VarChar(255)
  leagueSandbox String?   @map("league_sandbox") @db.VarChar(255)
  messages      Json      @default("[]")
  summary       String?   @db.Text
  // WebSocket integration fields
  socketId      String?   @map("socket_id") @db.VarChar(255)
  isStreaming   Boolean   @default(false) @map("is_streaming")
  lastToken     String?   @map("last_token") @db.Text
  streamMetadata Json?    @map("stream_metadata") @default("{}")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user User? @relation("UserConversations", fields: [userId], references: [id])
  
  @@index([sessionId, agentId])
  @@index([userId, createdAt])
  @@index([socketId])
  @@map("agent_conversations")
}

// Agent configuration and personality settings
model AgentConfig {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  agentId       String    @unique @map("agent_id") @db.VarChar(255)
  agentType     AgentType @map("agent_type")
  leagueSandbox String?   @map("league_sandbox") @db.VarChar(255)
  personality   Json      // traits, tone, expertise
  tools         Json      @default("[]")
  parameters    Json      @default("{}") // temperature, maxTokens, etc.
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  @@unique([agentId, leagueSandbox])
  @@index([agentType, leagueSandbox])
  @@map("agent_configs")
}

// Content Pipeline Models (Sprint 10)

// Generated content from AI agents
model GeneratedContent {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId      String        @map("league_id") @db.Uuid
  leagueSandbox String        @map("league_sandbox") @db.VarChar(255)
  type          ContentType
  title         String        @db.VarChar(500)
  content       String        @db.Text
  excerpt       String?       @db.Text
  agentId       String        @map("agent_id") @db.VarChar(255)
  agentType     AgentType?    @map("agent_type")
  status        ContentStatus @default(DRAFT)
  metadata      Json          @default("{}") // request params, tools used, etc.
  reviewData    Json?         @map("review_data") // AI review, quality score, safety check
  publishedId   String?       @map("published_id") @db.Uuid // Reference to BlogPost if published
  scheduleId    String?       @map("schedule_id") @db.Uuid
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  publishedAt   DateTime?     @map("published_at")
  
  // Relations
  league    League           @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  schedule  ContentSchedule? @relation(fields: [scheduleId], references: [id])
  blogPost  BlogPost?        @relation(fields: [publishedId], references: [id])
  
  @@index([leagueId, status])
  @@index([type, status])
  @@index([agentId])
  @@index([createdAt])
  @@map("generated_content")
}

// Published blog posts
model BlogPost {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId      String    @map("league_id") @db.Uuid
  leagueSandbox String    @map("league_sandbox") @db.VarChar(255)
  title         String    @db.VarChar(500)
  slug          String    @db.VarChar(500)
  content       String    @db.Text
  excerpt       String?   @db.Text
  authorType    String    @map("author_type") @db.VarChar(50) // 'AI' or 'USER'
  authorId      String    @map("author_id") @db.VarChar(255) // agentId or userId
  tags          String[]  @default([])
  viewCount     Int       @default(0) @map("view_count")
  featured      Boolean   @default(false)
  publishedAt   DateTime  @default(now()) @map("published_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  league           League             @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  generatedContent GeneratedContent[]
  
  @@unique([leagueId, slug])
  @@index([leagueId, publishedAt])
  @@index([authorId])
  @@index([tags])
  @@map("blog_posts")
}

// Content generation schedules
model ContentSchedule {
  id            String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId      String             @map("league_id") @db.Uuid
  leagueSandbox String             @map("league_sandbox") @db.VarChar(255)
  name          String             @db.VarChar(255)
  description   String?            @db.Text
  type          ContentType
  agentType     AgentType          @map("agent_type")
  cronExpression String            @map("cron_expression") @db.VarChar(100) // e.g., "0 9 * * MON"
  templateId    String?            @map("template_id") @db.Uuid
  enabled       Boolean            @default(true)
  lastRunAt     DateTime?          @map("last_run_at")
  nextRunAt     DateTime?          @map("next_run_at")
  metadata      Json               @default("{}") // custom parameters for generation
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  
  // Relations
  league           League             @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  template         ContentTemplate?   @relation(fields: [templateId], references: [id])
  generatedContent GeneratedContent[]
  
  @@index([leagueId, enabled])
  @@index([nextRunAt])
  @@map("content_schedules")
}

// Reusable content templates
model ContentTemplate {
  id          String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String            @db.VarChar(255)
  description String?           @db.Text
  type        ContentType
  prompt      String            @db.Text // Template prompt with placeholders
  structure   Json              @default("{}") // Expected structure/sections
  metadata    Json              @default("{}") // Default parameters
  isGlobal    Boolean           @default(false) @map("is_global") // Available to all leagues
  leagueId    String?           @map("league_id") @db.Uuid // null if global
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  
  // Relations
  league    League?           @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  schedules ContentSchedule[]
  
  @@index([type, isGlobal])
  @@index([leagueId])
  @@map("content_templates")
}

// ========== CHAT INTEGRATION MODELS (Sprint 11) ==========

// Chat messages for all conversations (user and agent)
model ChatMessage {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  leagueId        String            @map("league_id") @db.Uuid
  leagueSandbox   String            @map("league_sandbox") @db.VarChar(255)
  sessionId       String            @map("session_id") @db.VarChar(255)
  conversationId  String?           @map("conversation_id") @db.VarChar(255)
  senderId        String            @map("sender_id") @db.VarChar(255) // userId or agentId
  senderType      ChatMessageType   @map("sender_type")
  content         String            @db.Text
  metadata        Json              @default("{}") // tools used, tokens, etc.
  replyToId       String?           @map("reply_to_id") @db.Uuid
  edited          Boolean           @default(false)
  editedAt        DateTime?         @map("edited_at")
  deleted         Boolean           @default(false)
  deletedAt       DateTime?         @map("deleted_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  
  // Relations
  league   League          @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  session  ChatSession     @relation(fields: [sessionId], references: [id])
  replyTo  ChatMessage?    @relation("MessageReplies", fields: [replyToId], references: [id])
  replies  ChatMessage[]   @relation("MessageReplies")
  
  @@index([leagueId, sessionId])
  @@index([conversationId])
  @@index([senderId, senderType])
  @@index([createdAt])
  @@map("chat_messages")
}

// Chat sessions for tracking conversations
model ChatSession {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionId       String        @unique @map("session_id") @db.VarChar(255)
  leagueId        String        @map("league_id") @db.Uuid
  leagueSandbox   String        @map("league_sandbox") @db.VarChar(255)
  title           String?       @db.VarChar(255)
  participants    Json          @default("[]") // Array of participant IDs
  activeAgents    Json          @default("[]") // Currently active agent IDs
  context         Json          @default("{}") // Session context data
  metadata        Json          @default("{}") // WebSocket info, etc.
  startedAt       DateTime      @default(now()) @map("started_at")
  lastActivityAt  DateTime      @default(now()) @map("last_activity_at")
  endedAt         DateTime?     @map("ended_at")
  
  // Relations
  league   League            @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
  summons  AgentSummon[]
  
  @@index([leagueId, startedAt])
  @@index([lastActivityAt])
  @@map("chat_sessions")
}

// Track when agents are summoned into conversations
model AgentSummon {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sessionId       String        @map("session_id") @db.VarChar(255)
  agentId         String        @map("agent_id") @db.VarChar(255)
  agentType       AgentType     @map("agent_type")
  summonedBy      String        @map("summoned_by") @db.Uuid // User who summoned
  reason          String?       @db.Text // Why agent was summoned
  introMessage    String?       @map("intro_message") @db.Text
  active          Boolean       @default(true)
  messageCount    Int           @default(0) @map("message_count")
  toolsUsed       Json          @default("[]") @map("tools_used")
  summonedAt      DateTime      @default(now()) @map("summoned_at")
  dismissedAt     DateTime?     @map("dismissed_at")
  
  // Relations
  session  ChatSession      @relation(fields: [sessionId], references: [sessionId])
  user     User            @relation(fields: [summonedBy], references: [id])
  
  @@unique([sessionId, agentId])
  @@index([agentType, active])
  @@index([summonedAt])
  @@map("agent_summons")
}

// Enum for chat message types
enum ChatMessageType {
  USER
  AGENT
  SYSTEM
  COMMAND
  NOTIFICATION
  
  @@map("chat_message_type")
}

// Enums for content pipeline

enum ContentType {
  WEEKLY_RECAP
  POWER_RANKINGS
  MATCHUP_PREVIEW
  TRADE_ANALYSIS
  INJURY_REPORT
  SEASON_NARRATIVE
  PLAYOFF_PREVIEW
  CHAMPIONSHIP_RECAP
  DRAFT_ANALYSIS
  WAIVER_WIRE
  CUSTOM
  
  @@map("content_type")
}

enum ContentStatus {
  DRAFT
  IN_REVIEW
  NEEDS_REVIEW
  APPROVED
  PUBLISHED
  REJECTED
  ARCHIVED
  
  @@map("content_status")
}